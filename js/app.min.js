/*
 * JavaScript File
 * Developed by TriForce
 * 
 * Modified:  Dec. 16, 2021. 07:24 (UTC-3)
 * Source:    https://github.com/TriForceX/TriForce.Dev
 */
let glitch,windowW=window.innerWidth,windowH=window.innerHeight,isDebug=!0,isLoaded=!1,imgSrc="img/triforce.png",urlSrc="https://github.com/TriForceX";function appendGithub(){if(!document.getElementById("github")){var i=document.createElement("div");i.id="github",i.innerHTML='<a title="@TriForceX" href="'+urlSrc+'">TriForce Dev <img src="https://github.githubassets.com/favicons/favicon-dark.png" width="20"></a>',document.getElementsByTagName("main")[0].appendChild(i)}}function setup(){background(13,17,23),createCanvas(windowW,windowH),loadImage(imgSrc,function(i){glitch=new Glitch(i),isLoaded=!0})}function draw(){clear(),background(0),isLoaded&&(glitch.show(),appendGithub()),isDebug&&(fill(255,255,255,127),textSize(12),text("FPS: "+floor(frameRate()),10,20),text("RES: "+windowW+" x "+windowH,10,35))}function windowResized(){resizeCanvas(windowWidth,windowHeight)}function onMouseClick(){window.location.href=urlSrc}document.addEventListener("click",onMouseClick,!1);class Glitch{constructor(i){this.channelLen=4,this.imgOrigin=i,this.imgOrigin.loadPixels(),this.copyData=[],this.flowLineImgs=[],this.shiftLineImgs=[],this.shiftRGBs=[],this.scatImgs=[],this.throughFlag=!0,this.copyData=new Uint8ClampedArray(this.imgOrigin.pixels);for(let i=0;i<1;i++){let i={pixels:null,t1:floor(random(0,1e3)),speed:floor(random(4,24)),randX:floor(random(24,80))};this.flowLineImgs.push(i)}for(let i=0;i<6;i++){let i=null;this.shiftLineImgs.push(i)}for(let i=0;i<1;i++){let i=null;this.shiftRGBs.push(i)}for(let i=0;i<3;i++){let i={img:null,x:0,y:0};this.scatImgs.push(i)}}replaceData(i,t){for(let e=0;e<i.height;e++)for(let h=0;h<i.width;h++){let n,o,r,s,l;n=l=(e*i.width+h)*this.channelLen,o=l+1,r=l+2,s=l+3,i.pixels[n]=t[n],i.pixels[o]=t[o],i.pixels[r]=t[r],i.pixels[s]=t[s]}i.updatePixels()}flowLine(i,t){let e,h;e=new Uint8ClampedArray(i.pixels),t.t1%=i.height,t.t1+=t.speed,h=floor(t.t1);for(let n=0;n<i.height;n++)if(h===n)for(let h=0;h<i.width;h++){let o,r,s,l,a;r=(a=(n*i.width+h)*this.channelLen)+1,s=a+2,l=a+3,e[o=a]=i.pixels[o]+t.randX,e[r]=i.pixels[r]+t.randX,e[s]=i.pixels[s]+t.randX,e[l]=i.pixels[l]}return e}shiftLine(i){let t,e,h,n,o;n=new Uint8ClampedArray(i.pixels),o=i.height,h=(e=floor(random(0,o)))+floor(random(1,o-e)),t=this.channelLen*floor(random(-40,40));for(let o=0;o<i.height;o++)if(o>e&&o<h)for(let e=0;e<i.width;e++){let h,r,s,l,a,g,d,m;l=(m=(o*i.width+e)*this.channelLen)+3,a=(h=m)+t,g=(r=m+1)+t,d=(s=m+2)+t,n[h]=i.pixels[a],n[r]=i.pixels[g],n[s]=i.pixels[d],n[l]=i.pixels[l]}return n}shiftRGB(i){let t,e,h,n,o;o=16,n=new Uint8ClampedArray(i.pixels),t=(floor(random(-16,16))*i.width+floor(random(-16,16)))*this.channelLen,e=(floor(random(-16,16))*i.width+floor(random(-16,16)))*this.channelLen,h=(floor(random(-16,16))*i.width+floor(random(-16,16)))*this.channelLen;for(let o=0;o<i.height;o++)for(let r=0;r<i.width;r++){let s,l,a,g,d,m,f,c;l=(c=(o*i.width+r)*this.channelLen)+1,a=c+2,g=c+3,d=((s=c)+t)%i.pixels.length,m=(l+e)%i.pixels.length,f=(a+h)%i.pixels.length,n[s]=i.pixels[d],n[l]=i.pixels[m],n[a]=i.pixels[f],n[g]=i.pixels[g]}return n}getRandomRectImg(i){let t,e,h,n,o;return t=floor(random(0,i.width-30)),e=floor(random(0,i.height-50)),h=floor(random(30,i.width-t)),n=floor(random(1,50)),(o=i.get(t,e,h,n)).loadPixels(),o}show(){if(this.replaceData(this.imgOrigin,this.copyData),floor(random(100))>75&&this.throughFlag&&(this.throughFlag=!1,setTimeout(()=>{this.throughFlag=!0},floor(random(40,400)))),!this.throughFlag)return push(),translate((width-this.imgOrigin.width)/2,(height-this.imgOrigin.height)/2),image(this.imgOrigin,0,0),void pop();this.flowLineImgs.forEach((i,t,e)=>{e[t].pixels=this.flowLine(this.imgOrigin,i),e[t].pixels&&this.replaceData(this.imgOrigin,e[t].pixels)}),this.shiftLineImgs.forEach((i,t,e)=>{floor(random(100))>50?(e[t]=this.shiftLine(this.imgOrigin),this.replaceData(this.imgOrigin,e[t])):e[t]&&this.replaceData(this.imgOrigin,e[t])}),this.shiftRGBs.forEach((i,t,e)=>{floor(random(100))>65&&(e[t]=this.shiftRGB(this.imgOrigin),this.replaceData(this.imgOrigin,e[t]))}),push(),translate((width-this.imgOrigin.width)/2,(height-this.imgOrigin.height)/2),image(this.imgOrigin,0,0),pop(),this.scatImgs.forEach(i=>{push(),translate((width-this.imgOrigin.width)/2,(height-this.imgOrigin.height)/2),floor(random(100))>80&&(i.x=floor(random(.3*-this.imgOrigin.width,.7*this.imgOrigin.width)),i.y=floor(random(.1*-this.imgOrigin.height,this.imgOrigin.height)),i.img=this.getRandomRectImg(this.imgOrigin)),i.img&&image(i.img,i.x,i.y),pop()})}}